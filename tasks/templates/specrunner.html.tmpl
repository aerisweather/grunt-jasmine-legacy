<!DOCTYPE html>
<html>
<head>
  <title>Jasmine Spec Runner</title>
  <link rel="shortcut icon" type="image/x-icon" href="favicon.png"/>
  <link rel="stylesheet" type="text/css" href="../bower_components/jasmine/lib/jasmine-core/jasmine.css">
  <script src="../bower_components/requirejs/require.js"></script>

</head>
<body>

<% if (isPhantom) { %>
  <script type="text/javascript">
    var PhantomJSReporter = function() {
        this.failedSpecs_ = [];
        this.startTime_;
      };

    PhantomJSReporter.prototype.reportRunnerStarting = function(runner) {
      this.sendMessage_('jasmine.start', runner.specs().length);
      this.startTime_ = new Date();
    };


    PhantomJSReporter.prototype.reportRunnerResults = function(runner) {
      var result = runner.results();
      var failCount = result.totalCount - result.passedCount;
      var isPassing = !failCount;

      var failedSpecDescriptions = this.failedSpecs_.map(function(spec) {
        return {
          fullName: spec.getFullName(),
          items: spec.results().getItems().filter(function(item) {
            return !item.passed();
          }).map(function(item) {
            return {
              trace: item.trace.stack,
              message: item.message
            };
          })
        };
      }, this);

      this.sendMessage_('jasmine.runnerResult', {
        passedCount: result.passedCount,
        totalCount: result.totalCount,
        failedSpecs: failedSpecDescriptions,
        time: new Date().getTime() - this.startTime_.getTime()
      });
      this.sendMessage_('jasmine.done', isPassing);
    };


    PhantomJSReporter.prototype.reportSpecResults = function(spec) {
      var result = spec.results();

      if (!result.passed()) {
        this.failedSpecs_.push(spec);
      }

      this.sendMessage_('jasmine.specResult', spec.description, result.passed());
    };


    PhantomJSReporter.prototype.sendMessage_ = function(topic, message) {
      var args = [].slice.call(arguments);
      alert(JSON.stringify(args));
    };
  </script>
  
  <script type="text/javascript">
    if (!Function.prototype.bind) {
      Function.prototype.bind = function (oThis) {
        if (typeof this !== "function") {
          // closest thing possible to the ECMAScript 5 internal IsCallable function
          throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        }
    
        var aArgs = Array.prototype.slice.call(arguments, 1), 
            fToBind = this, 
            fNOP = function () {},
            fBound = function () {
              return fToBind.apply(this instanceof fNOP && oThis
                                     ? this
                                     : oThis,
                                   aArgs.concat(Array.prototype.slice.call(arguments)));
            };
    
        fNOP.prototype = this.prototype;
        fBound.prototype = new fNOP();
    
        return fBound;
      };
    }
  </script>
<% } %>

<script type="text/javascript">

  <% if (isPhantom) { %>
    window.onerror = function(msg, url, lineNumber, col, errorObj) {
      var msg = errorObj && errorObj.stack ?
        errorObj.stack : [msg, url, lineNumber].join('; ') + '.';

      sendMessage('jasmine.error', msg);
      return true;
    };

    function sendMessage(topic, message) {
      var args = [].slice.call(arguments);
      alert(JSON.stringify(args));
    };
  <% } %>

  <% if (amdConfig) { %>
    require.config(<%=JSON.stringify(amdConfig, null, 2) %>);
  <% } %>

  require([
    '<%=amdConfigModules.join('\',\n    \'') %>'
  ], function() {

    require([
      '<%=libs.join('\',\n      \'') %>'
    ], function() {
      var jasmineEnv = jasmine.getEnv();

      <% if (isPhantom) { %>
        var reporter = new PhantomJSReporter();
      <% }
      else { %>
        var reporter = new jasmine.HtmlReporter();
      <% } %>


      jasmineEnv.addReporter(reporter);

      if (reporter.specFilter) {
        jasmineEnv.specFilter = function(spec) {
            return reporter.specFilter(spec);
          };
      }

      require([
        '<%=specs.join('\',\n        \'')%>'
      ], function() {
        jasmineEnv.execute();
      });
    });
  });
</script>
</body>
</html>